// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"golang.org/x/crypto/bcrypt"
	"github.com/google/uuid"


)

type Student struct {
	ID         string
	UserID     sql.NullString
	Name       string
	Age        int32
	Graduation string
	Attendance sql.NullInt32
	Absences   sql.NullInt32
	Payment    bool
	Email      string
	Password   string
}

type User struct {
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Email          string  `json:"email"`
	Phone          string  `json:"phone"`
	AcademyName    string  `json:"academy_name"`
	InstructorBelt string  `json:"instructor_belt"`
	Password       string   `json:"-"`
}

func NewUser(name, email, phone, academy_name, instructor_belt, password string) (*User, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err!= nil {
        return nil, err
    }

	return &User{
			ID: uuid.New().String(),
			Name: name,
			Email: email,
			Phone: phone,
            AcademyName: academy_name,
            InstructorBelt: instructor_belt,
			Password: string(hash),
		}, nil
	}


func (u *User) ValidatePasswordUser(password string) bool { 
	err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(password))
	println([]byte(password))

	return err == nil
}
