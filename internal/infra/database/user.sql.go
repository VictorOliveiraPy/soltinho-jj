// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, password, email, role_id, active)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
	Email    string
	RoleID   string
	Active   bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RoleID,
		arg.Active,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, role_id, active FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Active,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, email, role_id, active FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Active,
	)
	return i, err
}

const getUserCompleteProfile = `-- name: GetUserCompleteProfile :one
SELECT
    u.id AS "ID",
    u.username AS "Username",
    u.email AS "Email",
    u.role_id AS "RoleID",
    u.active AS "Active",
    g.id AS "GymID",
    g.gym_name AS "GymName",
    g.team_name AS "TeamName",
    g.active AS "GymActive",
    s.id AS "StudentID",
    s.graduation AS "Graduation",
    s.active AS "StudentActive",
    s.training_time AS "TrainingTime"
FROM users u
LEFT JOIN gyms g ON u.id = g.user_id
LEFT JOIN students s ON g.id = s.gym_id
WHERE u.id = $1
`

type GetUserCompleteProfileRow struct {
	ID            string
	Username      string
	Email         string
	RoleID        string
	Active        bool
	GymID         sql.NullString
	GymName       sql.NullString
	TeamName      sql.NullString
	GymActive     sql.NullBool
	StudentID     sql.NullString
	Graduation    sql.NullString
	StudentActive sql.NullBool
	TrainingTime  sql.NullString
}

// result: GetUserCompleteProfileRow
func (q *Queries) GetUserCompleteProfile(ctx context.Context, id string) (GetUserCompleteProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserCompleteProfile, id)
	var i GetUserCompleteProfileRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.RoleID,
		&i.Active,
		&i.GymID,
		&i.GymName,
		&i.TeamName,
		&i.GymActive,
		&i.StudentID,
		&i.Graduation,
		&i.StudentActive,
		&i.TrainingTime,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT u.id, u.username, r.name AS role
FROM users u
JOIN user_roles r ON u.role_id = r.id
WHERE u.id = $1
`

type GetUserRoleRow struct {
	ID       string
	Username string
	Role     string
}

func (q *Queries) GetUserRole(ctx context.Context, id string) (GetUserRoleRow, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var i GetUserRoleRow
	err := row.Scan(&i.ID, &i.Username, &i.Role)
	return i, err
}

const getUserRoleName = `-- name: GetUserRoleName :one
SELECT ur.name FROM user_roles ur JOIN users u ON u.role_id = ur.id WHERE u.id = $1
`

func (q *Queries) GetUserRoleName(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserRoleName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2,
    password = $3,
    email = $4,
    role_id = $5,
    active = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID       string
	Username string
	Password string
	Email    string
	RoleID   string
	Active   bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RoleID,
		arg.Active,
	)
	return err
}
